select:
  - platform: template
    id: handles_distance_select
    name: "Distance:"
    # optimistic: true
    restore_value: true
    icon: mdi:map-marker-distance
    # make sure the ordering is the same as in the C++ enum!
    options:
      - Shortest    
      - Left
      - Right
      - Random
    initial_option: Random
    set_action:
      lambda:  id(animator).pick(static_cast<animator24::handles_distance::Enum>(id(handles_distance_select).index_of(x).value_or(0)));

switch:
  - platform: template
    name: "Distance: SHORTEST"
    restore_state: true
    lambda: return id(animator).state(animator24::handles_distance::SHORTEST);
    turn_on_action:
      - lambda: id(animator).turn_on(animator24::handles_distance::SHORTEST);
    turn_off_action:
      - lambda: id(animator).turn_off(animator24::handles_distance::SHORTEST);
  - platform: template
    name: "Distance: LEFT"
    restore_state: true
    lambda: return id(animator).state(animator24::handles_distance::LEFT);
    turn_on_action:
      - lambda: id(animator).turn_on(animator24::handles_distance::LEFT);
    turn_off_action:
      - lambda: id(animator).turn_off(animator24::handles_distance::LEFT);
  - platform: template
    name: "Distance: RIGHT"
    restore_state: true
    lambda: return id(animator).state(animator24::handles_distance::RIGHT);
    turn_on_action:
      - lambda: id(animator).turn_on(animator24::handles_distance::RIGHT);
    turn_off_action:
      - lambda: id(animator).turn_off(animator24::handles_distance::RIGHT);
